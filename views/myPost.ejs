<div style="width: 100%; height: 1100px; background-color: #2d2d2d;">
    <nav>
        <div class="comunity_nav">
            <div style="cursor: default;" onclick="location.href='/friends';">나의 러닝메이트</div>
            <div style="cursor: default;" onclick="location.href='/course';">러닝 코스</div>
            <div style="color: #ffffff; border-bottom: solid #747474 2px; cursor: default;" onclick="location.href='/community';">게시판</div>
        </div>
    </nav>
    <section>
        <div style="display: flex; justify-content: space-between; padding-left: 30px; padding-right: 30px; padding-top: 30px; margin-bottom: 20px;">
            <div style="font-size: 20px; font-weight: 600; color: #66FFE3">나의 글</div>
            <div onclick="toggleDeleteMode()" id="delete-btn" style="color: #E4F2F0; font-size: 14px; background-color: #647A75; width: 76px; height: 27px; text-align: center; border-radius: 50px; line-height: 27px; cursor: pointer;">삭제하기</div>
        </div>
    </section>
    <div id="data-container"></div>
    <div id="pagination"></div>

    <script>
        const itemsPerPage = 5;
        const totalItems = 52;
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        let currentPage = 1;
        const pagesToShow = 10;
        let isDeleteMode = false;  // 삭제 모드 상태
        const items = Array.from({ length: totalItems }, (_, i) => ({
            id: i,
            title: `정말 오랜만에 러닝`,
            content: `진짜 너무너무 힘들었는데 다 뛰고 나니 너무 뿌듯하더라고...`
        }));

        function displayItems(page) {
            const start = (page - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            const paginatedItems = items.slice(start, end);

            const container = document.getElementById("data-container");
            container.innerHTML = paginatedItems.map(item => `
                <div style="display: flex;">
                    ${isDeleteMode ? `<input style="margin-right: 10px;" type="checkbox" class="item-checkbox" data-id="${item.id}" />` : ''}
                    <div class="board_write1" style="width: 330px;">
                        <div style="display: flex; flex-direction: column; gap: 5px;">
                            <div style="display: flex;">
                                <div style="padding-left: 10px; font-size: 16px;">${item.title}</div>
                            </div>
                            <div style="padding-left: 10px; font-size: 11px; padding-top: 5px">${item.content}</div>
                            <div style="padding-left: 10px; border-radius: 0 0 10px 10px; position: relative; top: 3px; line-height: 30px; width: 320px; background-color: #454545; font-size: 11px">꿈꾸는 고슴도치</div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function toggleDeleteMode() {
            isDeleteMode = !isDeleteMode;  // 삭제 모드 상태 전환
            const deleteBtn = document.getElementById("delete-btn");

            if (isDeleteMode) {
                deleteBtn.textContent = '삭제 완료';
                deleteBtn.style.backgroundColor = '#647A75';  // 삭제 완료 모드 스타일
            } else {
                deleteBtn.textContent = '삭제하기';
                deleteBtn.style.backgroundColor = '#647A75';  // 원래 스타일로 되돌리기
            }

            displayItems(currentPage);  // 삭제 모드 상태에 맞춰 글 목록 갱신
        }

        function deleteSelected() {
            const selectedItems = document.querySelectorAll('.item-checkbox:checked');
            const selectedIds = Array.from(selectedItems).map(item => item.getAttribute('data-id'));

            if (selectedIds.length === 0) {
                alert('삭제할 글을 선택해 주세요.');
                return;
            }

            // 선택된 항목들을 삭제
            const newItems = items.filter(item => !selectedIds.includes(String(item.id)));
            items.length = 0;
            items.push(...newItems); 

            // 삭제 후 다시 글 목록 갱신
            displayItems(currentPage);
            displayPagination();
        }

        function displayPagination() {
            const paginationContainer = document.getElementById("pagination");
            paginationContainer.innerHTML = '';

            const startPage = Math.floor((currentPage - 1) / pagesToShow) * pagesToShow + 1;
            const endPage = Math.min(startPage + pagesToShow - 1, totalPages);

            const prevButton = document.createElement("button");
            prevButton.textContent = '<';
            prevButton.className = currentPage === 1 ? 'disabled' : '';
            prevButton.disabled = currentPage === 1;
            prevButton.addEventListener("click", () => {
                if (currentPage > 1) {
                    currentPage--;
                    displayItems(currentPage);
                    displayPagination();
                }
            });
            paginationContainer.appendChild(prevButton);

            for (let i = startPage; i <= endPage; i++) {
                const button = document.createElement("button");
                button.textContent = i;
                if (i === currentPage) {
                    button.style.fontWeight = 'bold';
                }
                button.addEventListener("click", () => {
                    currentPage = i;
                    displayItems(currentPage);
                    displayPagination();
                });
                paginationContainer.appendChild(button);
            }

            const nextButton = document.createElement("button");
            nextButton.textContent = '>';
            nextButton.className = currentPage === totalPages ? 'disabled' : '';
            nextButton.disabled = currentPage === totalPages;
            nextButton.addEventListener("click", () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    displayItems(currentPage);
                    displayPagination();
                }
            });
            paginationContainer.appendChild(nextButton);
        }

        displayPagination();
        displayItems(currentPage);
    </script>
</div>
